#!/bin/bash
set -e

##################
## rhdwpTraefik ##
##################
#
# Sets up and (re)starts the main RHDWP Traefik router stack. 
#	Also used to rebuild config files.
#
####################
## Change History ##
####################
#
# 12/24/2019   Finally added this changelog.
#                Add documentation and restructure for long-term
#                happiness, and a Help function.
# 1/1/2020     Sanity checks.
# 1/3/2020     Added -d for dev mode; Removed license.
# 1/7/2020     Added -f for freshen mode.
# 1/8/2020     LegacyChecks for old version cleanups.
# 1/17/2020    API/Adminer/Staging flags.
# 1/21/2020    Replace WP's native cron with a system cronjob.
# 1/24/2020    Name change
# 1/30/2020    Added core cron jobs
#
##########
## Help ##
##########

Help()
{
	# Display Help
	echo "Generates a docker-compose.yml configuration for the RHDWP stack."
	echo
	echo "Syntax: rhdwpTraefik [-h][-d][-f][-a][-m dirname][-s][-k]"
	echo "options:"
	echo "-h            Print this Help."
	echo "-d            Development mode (implies -a)"
	echo "-f            Freshen site stacks in www/ directory"
	echo "-a            Enable dashboard."
	echo "-m dirname    Enable MySQL adminer dashboard for a project using the directory name (xyz.com => xyzcom)"
	echo "-s            LetsEncrypt Staging server"
	echo "-a            Kill the server gracefully, and remove the wget cron jobs for wp_cron"
	echo
}

###############
## Functions ##
###############

SanityChecks()
{
	# Check requried tools
	
	## Sudo
	echo "Checking sudo freshness..."
	sudo echo "Done."
	
	deps=( docker docker-compose )
	for i in "${deps[@]}"; do
	if ! hash "$i" 2>/dev/null; then
		printf "Error: %s was not found in PATH. Please check that it's installed before proceeding.\n" "$i"
		exit 1
	fi
	done
}

LegacyChecks()
{
	# Housekeeping section
	# Place one-off or immediate-use actions here.
	local _oldCliDir
	local _newCliDir
	_oldCliDir="${rootDir}/wp-cli"
	_newCliDir="${rootDir}/.wp-cli"

	# Move (or remove) ./wp-cli to ./.wp-cli
	if [[ -d "$_oldCliDir" ]]; then
		if [[ -d "$_newCliDir" ]]; then
			sudo rm -rf "$_oldCliDir"
		else
			sudo mv "$_oldCliDir" "$_newCliDir"
		fi
	fi
}

AskEnv()
{
	# Verify .env values

	# CloudFlare account email
	while [[ -z "$CF_API_EMAIL" ]]; do
		read -r -p "CloudFlare account email: " CF_API_EMAIL
	done

	# CloudFlare API Key
	while [[ -z "$CF_API_KEY" ]]; do
		read -r -p "CloudFlare API Key: " CF_API_KEY
	done

	# Mailgun API Key
	while [[ -z "$MG_API_KEY" ]]; do
		read -r -p "MailGun API Key: " MG_API_KEY
	done

	if [[ "$devMode" = true ]]; then
		# SMTP login for dev mode
		while [[ -z "$DEV_SMTP_LOGIN" ]]; do
			read -r -p "RHDEV SMTP Login (Mailgun): " DEV_SMTP_LOGIN
		done

		# Mailgun API Key
		while [[ -z "$DEV_SMTP_PASS" ]]; do
			read -r -p "RHDEV SMTP Pass (Mailgun): " DEV_SMTP_PASS
		done

		# SMTP login for dev mode
		while [[ -z "$DEV_SMTP_FROM" ]]; do
			read -r -p "RHDEV SMTP From: " DEV_SMTP_FROM
		done
	fi
}

WriteEnv()
{
	# Write to .env and lock it down

	cat <<-EOT > "$envFile"
	FQDN=$(hostname -f)
	CF_API_EMAIL=$CF_API_EMAIL
	CF_API_KEY=$CF_API_KEY
	MG_API_KEY=$MG_API_KEY
	DEV_SMTP_LOGIN=$DEV_SMTP_LOGIN
	DEV_SMTP_PASS=$DEV_SMTP_PASS
	DEV_SMTP_FROM=$DEV_SMTP_FROM
	EOT

	sudo chown "$USER" "$envFile"
	sudo chmod 600 "$envFile"
}

GenerateComposeFile()
{
	# Create/edit docker-compose.yml
	cp "$composeTemplate" "$composeTemporary"

	if [[ "$api" = true ]]; then
		# Uncomment all commented lines to enable
		sed -i '/## RHDWP: API ##/,/## RHDWP: API end ##/s/[^#]# / /g' "$composeTemporary"
	fi

	if [[ "$adminer" = true ]] && [[ ! -z "$adminerProject" ]]; then
		# Enable adminer for specified project (using the stack's directory)
		# e.g. use `abccom` for www/abc.com
		sed -i '/## RHDWP: Adminer ##/,/## RHDWP: Adminer end ##/s/[^#]# / /g' "$composeTemporary"
		
		# todo: use $PROJECT_LABEL envvar and move this out of Adminer block (keep in this function, though)
		sed -i "/## RHDWP: Adminer ##/,/## RHDWP: Adminer end ##/s/%%project_label%%/${adminerProject}/g" "$composeTemporary"
	fi

	if [[ "$certStaging" = true ]]; then
		sed -i '/## RHDWP: LetsEncrypt Staging ##/,/## RHDWP: LetsEncrypt Staging end ##/s/[^#]# / /g' "$composeTemporary"
	fi

	mv "$composeTemporary" "$composeFile"
}

SetupFiles()
{
	# Generate storage and log files, if necessary

	## Logs
	logDir="${traefikDir}/log"
	if [[ ! -d "$logDir" ]]; then
		mkdir "$logDir"
	fi

	log="${logDir}/error.log"
	if [[ ! -f "$log" ]]; then
		touch "$log"
	fi

	## LetsEncrypt storage
	acme="${traefikDir}/acme.json"
	if [[ ! -f "$acme" ]]; then
		sudo touch "$acme"
		sudo chown www-data:www-data "$acme"
		sudo chmod 600 "$acme"
	fi

	## Environment variables file
	envFile="${traefikDir}/.env"
	if [[ -r "$envFile" ]]; then
		# shellcheck disable=SC1091
		# shellcheck source=/srv/rhdwp/traefik/.env
		. "$envFile"
	fi

	## Create sites directory
	if [[ ! -d "${wwwDir}" ]]; then
		mkdir "${rootDir}/www"
	fi

	## wp-cli permissions
	sudo chown -R www-data:www-data "${rootDir}/.wp-cli"
}

FreshenSites()
{
	local _cwd="$PWD"
	for d in "${wwwDir}"/*; do
		dir="${d##*/}"

		echo "UPDATE $dir"
		git -C "$d" checkout master
		git -C "$d" pull -q

		# Rebuild
		if [[ -f "${d}/rhdwpStack" ]]; then
			cd "$d"
			sudo -u "$USER" ./rhdwpStack -q
		fi
		
		cd "$_cwd"
	done
}

InstallSystemCron()
{
	# Generates the wget commands to trigger WP Cron manually, and inserts into $USER crontab
	local _datetime
	local _tmpfile
	local _cmtStart
	local _cmtEnd
	local _cronLines
	local _jobs
	local _allJobs

	_datetime='*/5 * * * *'
	_tmpfile=$(mktemp)
	_cmtStart='# RHDWP Cron #'
	_cmtEnd='# RHDWP Cron end #'
	_cronLines=(
		"# Update WP"
		"@daily ${utilsDir}/update.sh"
		"# Start RHDWP server (traefik) at reboot with launch script"
		"@reboot ${rootDir}/startTraefik"
	)
	_jobs=
	_allJobs=

	# Load the current crontab
	if [[ -f "/var/spool/cron/crontabs/${USER}" ]]; then
		crontab -l > "$_tmpfile"
	fi

	# Generate the individual WP_Cron lines
	wwwCount=$(find "${wwwDir}" -maxdepth 1 -type d | wc -l)
	if [[ $wwwCount -gt 1 ]]; then
		_jobs='# www\n'
		for d in $wwwDir/*; do
			_dir="${d##*/}"

			# Add to the jobs list
			_jobs+="${_datetime} wget -q -O - https://${_dir}/wp-cron.php?doing_wp_cron > /dev/null 2>&1\n"
		done

		# Remove trailing '\n' lazy bastard
		_jobs="${_jobs%??}"
	fi

	# Delete existing entries, or else add entry point comments
	if grep -q "$_cmtStart" "$_tmpfile"; then
		sed -i "/$_cmtStart/,/$_cmtEnd/{//!d}" "$_tmpfile"
	else
		printf "%s\n%s" "$_cmtStart" "$_cmtEnd" >> "$_tmpfile"
	fi

	# Combine core tasks with generated jobs
	for line in "${_cronLines[@]}"; do
		if ! grep -q "$line" "$_tmpfile"; then
			_allJobs+="$line\n"
		fi
	done
	_allJobs+="${_jobs}"

	# Insert the new cron jobs
	sed -i "/$_cmtStart/a $_allJobs" "$_tmpfile"

	# Install the new crontab
	crontab -u "$USER" "$_tmpfile"

	# Clean up
	rm "$_tmpfile"
}

RemoveSystemCron()
{
	# Removes the wget commands (wp_cron triggering) from the $USER system crontab
	local _tmpfile
	local _cmtStart
	local _cmtEnd
	_tmpfile=$(mktemp)
	_cmtStart='# RHDWP Cron #'
	_cmtEnd='# RHDWP Cron end #'
	
	# Load the current crontab
	crontab -l > "$_tmpfile"
	
	# Find and remove the job(s)
	if grep -q "$_cmtStart" "$_tmpfile"; then
		sed -i "/$_cmtStart/,/$_cmtEnd/d" "$_tmpfile"
	fi

	# Install the new crontab
	crontab -u "$USER" "$_tmpfile"

	# Clean up
	rm "$_tmpfile"
}

FinishUp()
{
	# Remove temp files
	if [[ -f "$composeTemporary" ]]; then
		rm "$composeTemporary"
	fi
}

#########
# Main ##
#########
## Initialize variables
rootDir="$(dirname "$(realpath "$0")")"
traefikDir="${rootDir}/traefik"
utilsDir="${rootDir}/utils"
wwwDir="${rootDir}/www"
composeTemplate="${traefikDir}/docker-compose-template.yml"
composeTemporary=$(mktemp)
composeFile="${traefikDir}/docker-compose.yml"
network=web
devMode=false
freshenMode=false
api=
adminer=
certStaging=

## Get options
while getopts "hdfam:sk" opt; do
	case "$opt" in
	h) # display Help
		Help
		exit 0
		;;
	d) # Development mode
		echo "Development mode enabled."
		devMode=true
		api=true
		;;
	a) # API/Dashboard enabled
		api=true
		;;
	m) # Enable adminer for a project
		if [[ ! -z "$OPTARG" ]]; then
			adminer=true
			adminerProject=${OPTARG}
			echo "Adminer enabled for ${adminerProject}"
		else
			echo "Error: The -m option requires an argument."
			exit 1
		fi
		;;
	f) # Freshen sites (www/ site stacks)
		echo "Freshen sites"
		freshenMode=true
		;;
	s) # LetsEncrypt staging mode
		echo "Using LetsEncrypt staging server"
		certStaging=true
		;;
	k) # Kill the server and cleanup
		( cd "$traefikDir" && docker-compose down --remove-orphans -v )
		RemoveSystemCron
		exit 0
		;;
	\?) # invalid option
		echo "Invalid option: -$OPTARG" >&2
		exit 1
		;;
	esac
done

## Before we begin...
SanityChecks
LegacyChecks

## Generate LetsEncrypt storage and log files
SetupFiles

## Create web network
if ! docker network ls | grep -q "$network"; then
	docker network create "$network" || true
fi

## Retrieve or prompt for environment variables, and export to .env
AskEnv
WriteEnv

## System setup
InstallSystemCron

## Enable Development Mode
GenerateComposeFile

## Start traefik
( cd "$traefikDir" && docker-compose pull -q && ( docker-compose down -v --remove-orphans || true ) && docker-compose up -d --remove-orphans )

## Freshen site stacks
if [[ "$freshenMode" = true ]]; then
	FreshenSites
fi

## Clean up after yourself...
FinishUp
