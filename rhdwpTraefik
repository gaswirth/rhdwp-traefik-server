#!/bin/bash
set -ea

##################
## rhdwpTraefik ##
##################
#
# Manages and configures the rhdwp-docker site stack.
#
##########
## help ##
##########

help() {
	## Display help
	echo "Generates config and starts/stops the RHDWP Traefik instance."
	echo
	echo "Syntax: rhdwpTraefik [-h][-d][-f][-a][-m dirname][-s][-k]"
	echo
	echo "  -h            Help and usage"
	echo "  -b            Buffering expansion (large uploads)"
	echo "  -d            Development mode (implies -a)"
	echo "  -f            Freshen site stacks in the www/ directory"
	echo "  -k            Kill the server gracefully, and remove the wget cron jobs for wp_cron"
	echo "  -m dirname    Enable MySQL adminer dashboard for a project using the directory name."
	echo "  -n dirname    Create a new site stack"
	echo "  -s            LetsEncrypt Staging server mode"
	echo
}

###############
## Functions ##
###############

sanityChecks() {
	## Check requried tools

	## Sudo
	echo "Checking sudo freshness..."
	sudo echo "Done."

	deps=(docker)
	for i in "${deps[@]}"; do
		if ! hash "$i" 2>/dev/null; then
			printf "Error: %s was not found in PATH. Please check that it's installed before proceeding.\n" "$i"
			exit 1
		fi
	done
}

ctrlC() {
	## Peace out gracefully on interrupt

	echo "** INTERRUPTING COW MOO **"
	cleanUp
	exit
}

gitRepoNeedsUpdate() {
	## Checks if a repository is out of date

	git fetch
	_headHash=$(git rev-parse HEAD)
	#shellcheck disable=SC1083
	_upstreamHash=$(git rev-parse master@{upstream})

	# Return the result
	[[ "$_headHash" != "$_upstreamHash" ]]
}

askEnv() {
	## Verify .env values

	# CloudFlare account email
	while [[ -z "$CLOUDFLARE_EMAIL" ]]; do
		read -r -p "CloudFlare account email: " CLOUDFLARE_EMAIL
	done

	# CloudFlare API Key
	while [[ -z "$CLOUDFLARE_API_KEY" ]]; do
		read -r -p "CloudFlare API Key: " CLOUDFLARE_API_KEY
	done

	# Mailgun API Key
	while [[ -z "$MG_API_KEY" ]]; do
		read -r -p "MailGun API Key: " MG_API_KEY
	done

	if [[ "$devMode" = true ]]; then
		# SMTP login for dev mode
		while [[ -z "$DEV_SMTP_LOGIN" ]]; do
			read -r -p "RHDEV SMTP Login (Mailgun): " DEV_SMTP_LOGIN
		done

		# Mailgun API Key
		while [[ -z "$DEV_SMTP_PASS" ]]; do
			read -r -p "RHDEV SMTP Pass (Mailgun): " DEV_SMTP_PASS
		done

		# SMTP login for dev mode
		while [[ -z "$DEV_SMTP_FROM" ]]; do
			read -r -p "RHDEV SMTP From: " DEV_SMTP_FROM
		done
	fi
}

writeEnv() {
	## Write to .env and lock it down

	cat <<-EOT >"$env"
		FQDN=$(hostname -f)
		CLOUDFLARE_EMAIL=$CLOUDFLARE_EMAIL
		CLOUDFLARE_API_KEY=$CLOUDFLARE_API_KEY
		MG_API_KEY=$MG_API_KEY
		DEV_SMTP_LOGIN=$DEV_SMTP_LOGIN
		DEV_SMTP_PASS=$DEV_SMTP_PASS
		DEV_SMTP_FROM=$DEV_SMTP_FROM
	EOT

	sudo chown "$serverUser":"$serverGroup" "$env"
	sudo chmod 660 "$env"
}

setupFiles() {
	## Generate storage and log files, if necessary

	## LetsEncrypt storage
	if [[ ! -f "$acme" ]]; then
		sudo touch "$acme"
		sudo chown "$serverUser":"$serverGroup" "$acme"
		sudo chmod 600 "$acme"
	fi

	## Environment variables file
	if [[ -r "$env" ]]; then
		# shellcheck disable=SC1091
		# shellcheck source=/srv/rhdwp/.env
		. "$env"
	fi

	## Create sites directory
	if [[ ! -d "${wwwDir}" ]]; then
		mkdir "${wwwDir}"
	fi

	## Generates the .wp-cli/config.yml file
	# if [[ ! -d "$wpcli" ]]; then
	# 	mkdir -p "$wpcli"
	# 	printf 'apache_modules:\n  - mod_rewrite' > "${wpcli}/config.yml"
	# fi
	# sudo chown -R "$serverUser":"$serverGroup" "$wpcli"
}

runSiteScripts() {
	## Run rhdwpStack in each site directory

	for d in "${wwwDir}"/*; do
		dir="${d##*/}"
		_flags=" -q"
		_branch=

		(
			cd "$d"

			_branch=$(git rev-parse --abbrev-ref HEAD)

			if gitRepoNeedsUpdate; then
				# Update and rebuild
				echo "UPDATE $dir"

				# Check for master branch
				if [[ "$_branch" != "master" ]]; then
					git checkout master
				fi

				git pull -q
			fi

			# Run
			# shellcheck disable=SC2086
			sudo -u "$user" ./rhdwpStack $_flags
		)
	done
}

installCron() {
	## Installs the cron.d script to make sure Traefik is started @reboot. Overwrites existing file!
	local cronMsg="## Make sure Traefik restarts on reboot"
	local cronJob="@reboot root ${traefikDir}/rhdwpTraefik"

	sudo touch "$cronFile"
	sudo chown root:root "$cronFile"
	sudo chmod 600 "$cronFile"
	printf '%s\n%s' "$cronMsg" "$cronJob" | sudo tee "$cronFile" >/dev/null
}

uninstallCron() {
	## Removes up the cron.d entry
	sudo rm -f "$cronFile"
}

stopServer() {
	## Stop the main traefik stack and clean up
	docker stack rm "$traefikLabel"
	uninstallCron
}

newSite() {
	## Create a new site stack in www/
	# $1: the stack directory name (domain)

	local dir="$1"
	local sitePath="${wwwDir}/${dir}"

	# Sanity check
	if [[ -z "$dir" ]]; then
		echo "No directory name supplied."
		exit 1
	fi

	# Spin up the stack
	(
		git clone -b swarm-gluster git@github.com:gaswirth/rhdwp-docker "${sitePath}"
		cd "$sitePath" || exit
		./rhdwpStack
	)
}

startTraefik() {
	## Pull freshest images and start the stack

	docker stack deploy -c "$composeFile" "$traefikLabel"
}

cleanUp() {
	## Stop worrying where you're going

	echo "Cleaning up..."

	for f in "${tempPrefix}"*; do
		if [[ -e "$f" ]]; then
			sudo rm "$f"
		fi
	done
}

#########
# Main ##
#########
## Trap ctrl+c
trap ctrlC INT

## Initialize variables
traefikDir="$(dirname "$(realpath "$0")")"
env="${traefikDir}/.env"
storageDir=/mnt
wwwDir="${storageDir}/www"
acme="${storageDir}/letsencrypt/acme.json"
composeTemplate="${traefikDir}/traefik-template.yml"
composeFile="${traefikDir}/traefik.yml"
tempPrefix=$(printf '/tmp/rhdwp.%s' "$(head -3 /dev/urandom | tr -cd '[:alnum:]' | cut -c -6).")
traefikLabel=traefik
cronFile=/etc/cron.d/rhdwpTraefik
# wpcli="${storageDir}/.wp-cli"
devMode=false
serverUser=www-data
serverGroup=www-data
user=gaswirth

## Get options
while getopts "hdfkm:n:s" opt; do
	case "$opt" in
	h) # display help
		help
		exit 0
		;;
	d) # Development mode
		echo "Development mode enabled."
		devMode=true
		;;
	f) # Freshen sites (www/ site stacks)
		echo "Freshen sites"
		runSiteScripts
		exit
		;;
	k) # Kill the server and cleanup
		echo "Stopping main server and cleaning up cron jobs..."
		stopServer
		echo "Done."
		exit 0
		;;
	m) # Enable adminer for a project
		if [[ -z "$OPTARG" ]]; then
			echo "Error: The -m option requires a docker network prefix (example: abccom)."
			exit 1
		else
			adminer=true
			adminerVhost=${OPTARG}
			echo "Adminer enabled for ${adminerVhost}"
		fi
		;;
	n) # Start a new site, and exit
		if [[ -z "$OPTARG" ]]; then
			echo "Error: The -n option requires an argument (directory name)."
			exit 1
		else
			echo "Creating www/${OPTARG}"
			newSite "${OPTARG}"
			exit 0
		fi
		;;
	s) # LetsEncrypt staging mode
		echo "Using LetsEncrypt staging server"
		certStaging=true
		;;
	\?) # invalid option
		echo "Invalid option: -$OPTARG" >&2
		exit 1
		;;
	esac
done

## Before we begin...
sanityChecks

## Generate LetsEncrypt storage and log files
setupFiles

## Create web network
# if ! docker network ls | grep -q "$network"; then
# 	docker network create --driver=overlay "$network" || true
# fi

## Retrieve or prompt for environment variables, and export to .env
askEnv
writeEnv

## System setup
if [[ $devMode = true ]]; then
	# Disable wp_cron customizations on development environments
	uninstallCron
else
	# Set up production wp_cron replacement
	installCron
fi

## Start traefik
startTraefik

## Don't be a slob
cleanUp
