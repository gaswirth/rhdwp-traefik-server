#!/bin/bash
set -ex
##################################################################
# startTraefik ###################################################
##################################################################
#
# Sets up and (re)starts the main RHDWP Traefik router stack. 
#		Also used to rebuild config files.
#
##################################################################
# Change History #################################################
##################################################################
#
# 12/24/19    Finally added this changelog.
#               Add documentation and restructure for long-term
#               happiness, and a Help function.
#               Yummy refactoring.
# 1/1/20      Sanity checks.
# 1/3/20      Added -d for dev mode; Removed license.
#
##################################################################
# Help ###########################################################
##################################################################

Help()
{
	# Display Help
	echo "Generates a docker-compose.yml configuration for the RHDWP stack."
	echo
	echo "Syntax: startTraefik [-h][-f][-d]"
	echo "options:"
	echo "-h    Print this Help."
	echo "-d    Development mode (enables dashboard and disables auto HTTPS redirection)"
	echo "-f    Run docker-compose up with --force-recreate flag."
	echo
}

##################################################################
# Functions ######################################################
##################################################################

SanityChecks()
{
	# Check requried tools
	
	## Sudo
	echo "Checking sudo freshness..."
	sudo echo "Done."
	
	deps=( docker docker-compose )
	for i in "${deps[@]}"; do
		if ! hash "$i" 2>/dev/null; then
			printf "Error: %s was not found in PATH. Please check that it's installed before proceeding.\n" "$i"
			exit 1
		fi
	done
}

AskEnv()
{
	# Verify .env values
	
	# CloudFlare account email
	while [[ -z "$CF_API_EMAIL" ]]; do
		read -r -p "CloudFlare account email: " CF_API_EMAIL
	done
	
	# CloudFlare API Key
	while [[ -z "$CF_API_KEY" ]]; do
		read -r -p "CloudFlare API Key: " CF_API_KEY
	done

	# Mailgun API Key
	while [[ -z "$MG_API_KEY" ]]; do
		read -r -p "MailGun API Key: " MG_API_KEY
	done

	if [[ "$devMode" = true ]]; then
		# SMTP login for dev mode
		while [[ -z "$DEV_SMTP_LOGIN" ]]; do
			read -r -p "RHDEV SMTP Login (Mailgun): " DEV_SMTP_LOGIN
		done

		# Mailgun API Key
		while [[ -z "$DEV_SMTP_PASS" ]]; do
			read -r -p "RHDEV SMTP Pass (Mailgun): " DEV_SMTP_PASS
		done
		
		# SMTP login for dev mode
		while [[ -z "$DEV_SMTP_FROM" ]]; do
			read -r -p "RHDEV SMTP From: " DEV_SMTP_FROM
		done
	fi
}

WriteEnv()
{
	# Write to .env and lock it down
	
	cat <<-EOT > "$env_file"
		FQDN=$(hostname -f)
		CF_API_EMAIL=$CF_API_EMAIL
		CF_API_KEY=$CF_API_KEY
		MG_API_KEY=$MG_API_KEY
		DEV_SMTP_LOGIN=$DEV_SMTP_LOGIN
		DEV_SMTP_PASS=$DEV_SMTP_PASS
		DEV_SMTP_FROM=$DEV_SMTP_FROM
	EOT

	sudo chown "$USER" "$env_file"
	sudo chmod 600 "$env_file"
}

GenerateComposeFile()
{
	# Create/edit docker-compose.yml
	cp "$composeTemplate" "$composeTemporary"

	if [[ "${devMode}" = true ]]; then
		# Uncomment all commented lines to enable
		sed 's/#\s//g' "$composeTemplate" > "$composeTemporary"
	fi

	mv "$composeTemporary" "$composeFile"
}

##################################################################
# Main ###########################################################
##################################################################
## Initialize variables
traefikDir=$(dirname "$(realpath "$0")")"/traefik"
composeTemplate="${traefikDir}/docker-compose-template.yml"
composeTemporary="${traefikDir}/docker-compose.yml~"
composeFile="${traefikDir}/docker-compose.yml"
flags=
devMode=false
## Get options
while getopts "hdf" opt; do
	case "$opt" in
		h)  # display Help
			Help
			exit
			;;
		d)  # Development mode
			echo "Development mode enabled."
			devMode=true
			;;
		f)  # force rebuild
			echo "Using --force-recreate..."
			flags='--force-recreate'
			;;
		\?) # invalid option
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac
done

## Before we begin...
SanityChecks

## LetsEncrypt storage
acme=./traefik/acme.json
if [[ ! -f "$acme" ]]; then
	sudo touch "$acme"
	sudo chown www-data:www-data "$acme"
	sudo chmod 600 "$acme"
fi

## wp-cli permissions
sudo chown -R www-data:www-data ./wp-cli

## Generate environment variables
env_file=./traefik/.env
if [[ -r "$env_file" ]]; then
	# shellcheck disable=SC1091
	# shellcheck source=/srv/rhdwp/traefik/.env
	. "$env_file"
fi
AskEnv
WriteEnv

## Create sites directory
if [[ ! -d ./www ]]; then
	mkdir www
fi

## Shiny new log (or not)
if [[ ! -d ./log ]]; then
	mkdir log
fi
if [[ ! -f ./log/error.log ]]; then
	touch error.log
fi

## Create web network
docker network create web || true

## Enable Development Mode
GenerateComposeFile

## Start traefik
( cd ./traefik && ( docker-compose down || true ) && docker-compose up -d --remove-orphans ${flags:-} )
