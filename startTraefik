#!/bin/bash
set -e

##################################################################
# startTraefik ###################################################
##################################################################
#
# Sets up and (re)starts the main RHDWP Traefik router stack. 
#	Also used to rebuild config files.
#
##################################################################
# Change History #################################################
##################################################################
#
# 12/24/2019  Finally added this changelog.
#               Add documentation and restructure for long-term
#               happiness, and a Help function.
# 1/1/2020    Sanity checks.
# 1/3/2020    Added -d for dev mode; Removed license.
# 1/7/2020    Added -f for freshen mode.
# 1/8/2020    LegacyChecks for old version cleanups
#
##################################################################
# Help ###########################################################
##################################################################

Help()
{
	# Display Help
	echo "Generates a docker-compose.yml configuration for the RHDWP stack."
	echo
	echo "Syntax: startTraefik [-h][-d][-a][-f]"
	echo "options:"
	echo "-h    Print this Help."
	echo "-d    Development mode (also enables authenticated Traefik dashboard)"
	echo "-a    Enable dashboard."
	echo "-f    Freshen site stacks in www/ directory"
	echo
}

##################################################################
# Functions ######################################################
##################################################################

SanityChecks()
{
	# Check requried tools
	
	## Sudo
	echo "Checking sudo freshness..."
	sudo echo "Done."
	
	deps=( docker docker-compose )
	for i in "${deps[@]}"; do
	if ! hash "$i" 2>/dev/null; then
		printf "Error: %s was not found in PATH. Please check that it's installed before proceeding.\n" "$i"
		exit 1
	fi
	done
}

LegacyChecks()
{
	# Housekeeping
	## Remove extraneous directories
	if [[ -d "${rootDir}/log" ]]; then
		rm -rf "${rootDir}/log"
	fi
}


AskEnv()
{
	# Verify .env values

	# CloudFlare account email
	while [[ -z "$CF_API_EMAIL" ]]; do
		read -r -p "CloudFlare account email: " CF_API_EMAIL
	done

	# CloudFlare API Key
	while [[ -z "$CF_API_KEY" ]]; do
		read -r -p "CloudFlare API Key: " CF_API_KEY
	done

	# Mailgun API Key
	while [[ -z "$MG_API_KEY" ]]; do
		read -r -p "MailGun API Key: " MG_API_KEY
	done

	if [[ "$devMode" = true ]]; then
		# SMTP login for dev mode
		while [[ -z "$DEV_SMTP_LOGIN" ]]; do
			read -r -p "RHDEV SMTP Login (Mailgun): " DEV_SMTP_LOGIN
		done

		# Mailgun API Key
		while [[ -z "$DEV_SMTP_PASS" ]]; do
			read -r -p "RHDEV SMTP Pass (Mailgun): " DEV_SMTP_PASS
		done

		# SMTP login for dev mode
		while [[ -z "$DEV_SMTP_FROM" ]]; do
			read -r -p "RHDEV SMTP From: " DEV_SMTP_FROM
		done
	fi
}

WriteEnv()
{
	# Write to .env and lock it down

	cat <<-EOT > "$env_file"
	FQDN=$(hostname -f)
	CF_API_EMAIL=$CF_API_EMAIL
	CF_API_KEY=$CF_API_KEY
	MG_API_KEY=$MG_API_KEY
	DEV_SMTP_LOGIN=$DEV_SMTP_LOGIN
	DEV_SMTP_PASS=$DEV_SMTP_PASS
	DEV_SMTP_FROM=$DEV_SMTP_FROM
	EOT

	sudo chown "$USER" "$env_file"
	sudo chmod 600 "$env_file"
}

GenerateComposeFile()
{
	# Create/edit docker-compose.yml
	cp "$composeTemplate" "$composeTemporary"

	if [[ "${api}" = true ]]; then
		# Uncomment all commented lines to enable
		sed 's/#\s//g' "$composeTemplate" > "$composeTemporary"
	fi

	mv "$composeTemporary" "$composeFile"
}

SetupFiles()
{
	# Generate storage and log files, if necessary

	## Logs
	logdir="${traefikDir}/log"
	if [[ ! -d "$logdir" ]]; then
		mkdir "$logdir"
	fi

	log="${logdir}/error.log"
	if [[ ! -f "$log" ]]; then
		touch "$log"
	fi

	## LetsEncrypt storage
	acme="${traefikDir}/acme.json"
	if [[ ! -f "$acme" ]]; then
		sudo touch "$acme"
		sudo chown www-data:www-data "$acme"
		sudo chmod 600 "$acme"
	fi

	## Environment variables file
	env_file="${traefikDir}/.env"
	if [[ -r "$env_file" ]]; then
		# shellcheck disable=SC1091
		# shellcheck source=/srv/rhdwp/traefik/.env
		. "$env_file"
	fi

	## Create sites directory
	if [[ ! -d "${wwwDir}" ]]; then
		mkdir "${rootDir}/www"
	fi

	## wp-cli permissions
	sudo chown -R www-data:www-data "${rootDir}/wp-cli"
}

FreshenSites()
{
	local _cwd="$PWD"
	for d in "${wwwDir}"/*; do
		dir="${d##*/}"

		echo "UPDATE $dir"
		git -C "$d" checkout master
		git -C "$d" pull -q

		# Rebuild
		if [[ -f "${d}/buildStack" ]]; then
			cd "$d"
			sudo -u "$USER" ./buildStack -q
		fi
		
		cd "$_cwd"
	done
}

##################################################################
# Main ###########################################################
##################################################################
## Initialize variables
rootDir="$(dirname "$(realpath "$0")")"
traefikDir="${rootDir}/traefik"
wwwDir="${rootDir}/www"
composeTemplate="${traefikDir}/docker-compose-template.yml"
composeTemporary="${traefikDir}/docker-compose.yml~"
composeFile="${traefikDir}/docker-compose.yml"
devMode=false
freshenMode=false
api=
network=web

## Get options
while getopts "hdaf" opt; do
	case "$opt" in
	h) # display Help
		Help
		exit
		;;
	d) # Development mode
		echo "Development mode enabled."
		devMode=true
		api=true
		;;
	a) # API/Dashboard enabled
		api=true
		;;
	f) # Freshen sites (www/ site stacks)
		echo "Freshen sites"
		freshenMode=true
		;;
	\?) # invalid option
		echo "Invalid option: -$OPTARG" >&2
		exit 1
		;;
	esac
done

## Before we begin...
SanityChecks
LegacyChecks

## Generate LetsEncrypt storage and log files
SetupFiles

## Create web network
if ! docker network ls | grep -q "$network"; then
	docker network create "$network" || true
fi

## Retrieve or prompt for environment variables, and export to .env
AskEnv
WriteEnv

## Enable Development Mode
GenerateComposeFile

## Start traefik
( cd "$traefikDir" && ( docker-compose down || true ) && docker-compose up -d --remove-orphans )

## Freshen site stacks
if [[ "$freshenMode" = true ]]; then
	FreshenSites
fi
